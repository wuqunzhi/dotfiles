{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"coutendl": {
		"prefix": "cl",
		"body": ["cout << $1 << endl;"],
		"description": "cout<< <<endl;"
	},
	"#inc": {
		"prefix": "#inc",
		"body": ["#include <bits/stdc++.h>", "using namespace std;", "int main() {", "\t$1", "}"],
		"description": "#inc"
	},

	"head": {
		"prefix": "head",
		"body": [
			"#include <bits/stdc++.h>",
			"#define pii pair<int, int>",
			"using namespace std;",
			"",
			"struct TreeNode {",
			"    int val;",
			"    TreeNode* next;",
			"    TreeNode() : val(0), next(nullptr) {}",
			"    TreeNode(int x) : val(x), next(nullptr) {}",
			"    TreeNode(int x, TreeNode* next) : val(x), next(next) {}",
			"};",
			"",
			"struct ListNode {",
			"    int val;",
			"    ListNode* next;",
			"    ListNode() : val(0), next(nullptr) {}",
			"    ListNode(int x) : val(x), next(nullptr) {}",
			"    ListNode(int x, ListNode* next) : val(x), next(next) {}",
			"};",
			"",
			"class Solution {",
			"    public:",
			"    $1",
			"    ",
			"};",
			"",
			"int main(){",
			"}"
		],
		"description": "leetcode"
	}
}
